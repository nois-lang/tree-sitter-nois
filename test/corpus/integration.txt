====
Integration
====

// import
use std::io::Display

// sum type
type Vec2(x: Float, y: Float)

// inherent impl
impl Vec2 {
    fn size(self): Float {
        self.x ^ 2. + self.y ^ 2.
    }
}

// impl
impl Display for Vec2 {
    fn fmt(self): String {
        "(" + self.x + ", " + self.y + ")"
    }
}

// variant type
type Shape {
    Rectangle(width: Num, height: Num),
    Circle(radius: Num),
}

// trait
trait Area {
    fn area(self): Num
}

// impl for variant type
impl Area for Shape {
    fn area(self): Num {
        match self {
            Shape::Rectangle(width, height) { width * height }
            Shape::Circle(radius) { math::pi * radius ^ 2 }
        }
    }
}

// function
fn add(a: Int, b: Int): Int { a + b }

// function generics and generic bounds
fn foo<T: Add + Div>(a: T, b: T): T {
    a.add(b).div(b)
}

fn main() {
    // define variable
    let n = 4
    // type hint
    let h: Int = 4

    // literals
    let i = 12
    let f = 12.34
    let c = 'a'
    let s = "abc"
    let b = true
    // list literals
    let l = [1, 2, 3]

    // constructor
    let vec = Vec2::Vec2(x: 2., y: 4.)

    // field accessor
    vec.x

    // function call
    println("hello")

    // method call
    vec.fmt()

    // alternative call syntax
    Vec2::fmt(vec)

    // method call syntax for ambiguous methods
    //Vec2::Display::fmt(vec)

    // if
    let d = if true { 4 } else { 2 + 6 }

    // while loop
    let e = while d < 5 {
        a = a + 1
    }

    // for loop
    let f = for g in [1, 2, 3] {
        println(g)
        g + 1
    }

    // destructuring
    let Vec2::Vec2(x) = vec

    // destructuring alias
    let Vec2::Vec2(x: b) = vec

    // match
    let b = match 4 {
        1 { "one" }
        n if n % 2 == 0 {
            if (n > 5) { "good" } else { "not good" }
        }
        _ { "whatever" }
    }

    // match type
    let b = match vec {
        Vec2::Vec2(x: 1, y: 1) { "one" }
        Vec2::Vec2(x: 1) { "x one whatever" }
        Vec2::Vec2(x) if x != 4 { format("x is {} not 4", x) }
        _ { "whatever"}
    }

    // if let
    if let Option(value) = Some(42) {
        println("value is {}", value)
    } else {
        println("no value")
    }

    // closure
    let square: |Num|: Num = |a| { a^2 }
    let here = || { println("here") }

    // fn reference
    let p = println

    // method reference
    // equivalent to |v: Vec2| v.fmt()
    let r = Vec2::fmt
}

---

(ERROR
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME)
        (COLON)
        (COLON)
        (NAME)
        (COLON)
        (COLON)
        (NAME)))
    (ERROR
      (divOp
        (SLASH)))
    (divOp
      (SLASH))
    (subExpr
      (identifier
        (NAME))))
  (typeDef
    (TYPE_KEYWORD)
    (NAME))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME)
            (COLON)
            (ERROR
              (NAME)
              (COMMA)
              (NAME))
            (COLON)
            (NAME))))
      (C_PAREN))
    (ERROR
      (divOp
        (SLASH)))
    (divOp
      (SLASH))
    (subExpr
      (identifier
        (NAME))))
  (implDef
    (IMPL_KEYWORD)
    (ERROR
      (NAME))
    (identifier
      (NAME))
    (block
      (O_BRACE)
      (fnDef
        (FN_KEYWORD)
        (NAME)
        (params
          (O_PAREN)
          (param
            (pattern
              (NAME)))
          (C_PAREN))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME)))))
        (block
          (O_BRACE)
          (expr
            (subExpr
              (identifier
                (NAME))))
          (ERROR
            (PERIOD))
          (expr
            (subExpr
              (identifier
                (NAME)))
            (expOp
              (CARET))
            (subExpr
              (FLOAT))
            (addOp
              (PLUS))
            (subExpr
              (identifier
                (NAME))))
          (ERROR
            (PERIOD))
          (expr
            (subExpr
              (identifier
                (NAME)))
            (expOp
              (CARET))
            (subExpr
              (FLOAT)))
          (C_BRACE)))
      (C_BRACE)))
  (implDef
    (IMPL_KEYWORD)
    (ERROR
      (NAME))
    (identifier
      (NAME))
    (implFor
      (FOR_KEYWORD)
      (identifier
        (NAME)))
    (block
      (O_BRACE)
      (fnDef
        (FN_KEYWORD)
        (NAME)
        (params
          (O_PAREN)
          (param
            (pattern
              (NAME)))
          (C_PAREN))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME)))))
        (block
          (O_BRACE)
          (expr
            (subExpr
              (STRING))
            (addOp
              (PLUS))
            (subExpr
              (identifier
                (NAME))))
          (ERROR
            (PERIOD))
          (expr
            (subExpr
              (identifier
                (NAME)))
            (addOp
              (PLUS))
            (subExpr
              (STRING))
            (addOp
              (PLUS))
            (subExpr
              (identifier
                (NAME))))
          (ERROR
            (PERIOD))
          (expr
            (subExpr
              (identifier
                (NAME)))
            (addOp
              (PLUS))
            (subExpr
              (STRING)))
          (C_BRACE)))
      (C_BRACE)))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (typeDef
    (TYPE_KEYWORD)
    (NAME))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (ERROR
    (O_BRACE))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME)
            (COLON)
            (ERROR
              (NAME)
              (COMMA)
              (NAME))
            (COLON)
            (NAME))))
      (C_PAREN)))
  (ERROR
    (COMMA))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME)
            (COLON)
            (MISSING COLON)
            (NAME))))
      (C_PAREN))
    (ERROR
      (COMMA)
      (C_BRACE)
      (divOp
        (SLASH)))
    (divOp
      (SLASH))
    (subExpr
      (identifier
        (NAME))))
  (traitDef
    (TRAIT_KEYWORD)
    (NAME)
    (block
      (O_BRACE)
      (fnDef
        (FN_KEYWORD)
        (NAME)
        (params
          (O_PAREN)
          (param
            (pattern
              (NAME)))
          (C_PAREN))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME))))))
      (C_BRACE)))
  (ERROR
    (IMPL_KEYWORD)
    (NAME)
    (NAME)
    (TYPE_KEYWORD))
  (implDef
    (IMPL_KEYWORD)
    (identifier
      (NAME))
    (implFor
      (FOR_KEYWORD)
      (identifier
        (NAME)))
    (block
      (O_BRACE)
      (fnDef
        (FN_KEYWORD)
        (NAME)
        (params
          (O_PAREN)
          (param
            (pattern
              (NAME)))
          (C_PAREN))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME)))))
        (block
          (O_BRACE)
          (expr
            (subExpr
              (matchExpr
                (MATCH_KEYWORD)
                (expr
                  (subExpr
                    (identifier
                      (NAME))))
                (matchClauses
                  (O_BRACE)
                  (matchClause
                    (pattern
                      (conPattern
                        (identifier
                          (NAME)
                          (COLON)
                          (COLON)
                          (NAME))
                        (conPatternParams
                          (O_PAREN)
                          (fieldPattern
                            (NAME))
                          (COMMA)
                          (fieldPattern
                            (NAME))
                          (C_PAREN))))
                    (block
                      (O_BRACE)
                      (expr
                        (subExpr
                          (identifier
                            (NAME)))
                        (multOp
                          (ASTERISK))
                        (subExpr
                          (identifier
                            (NAME))))
                      (C_BRACE)))
                  (matchClause
                    (pattern
                      (conPattern
                        (identifier
                          (NAME)
                          (COLON)
                          (COLON)
                          (NAME))
                        (conPatternParams
                          (O_PAREN)
                          (fieldPattern
                            (NAME))
                          (C_PAREN))))
                    (block
                      (O_BRACE)
                      (expr
                        (subExpr
                          (identifier
                            (NAME)
                            (COLON)
                            (COLON)
                            (NAME)))
                        (multOp
                          (ASTERISK))
                        (subExpr
                          (identifier
                            (NAME)))
                        (expOp
                          (CARET))
                        (subExpr
                          (INT)))
                      (C_BRACE)))
                  (C_BRACE)))))
          (C_BRACE)))
      (C_BRACE)))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (fnDef
    (FN_KEYWORD)
    (NAME)
    (params
      (O_PAREN)
      (param
        (pattern
          (NAME))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME))))))
      (COMMA)
      (param
        (pattern
          (NAME))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME))))))
      (C_PAREN))
    (typeAnnot
      (COLON)
      (type
        (typeBounds
          (identifier
            (NAME)))))
    (block
      (O_BRACE)
      (expr
        (subExpr
          (identifier
            (NAME)))
        (addOp
          (PLUS))
        (subExpr
          (identifier
            (NAME))))
      (C_BRACE)))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (fnDef
    (FN_KEYWORD)
    (NAME)
    (generics
      (O_ANGLE)
      (generic
        (NAME)
        (COLON)
        (typeBounds
          (identifier
            (NAME))
          (PLUS)
          (identifier
            (NAME))))
      (C_ANGLE))
    (params
      (O_PAREN)
      (param
        (pattern
          (NAME))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME))))))
      (COMMA)
      (param
        (pattern
          (NAME))
        (typeAnnot
          (COLON)
          (type
            (typeBounds
              (identifier
                (NAME))))))
      (C_PAREN))
    (typeAnnot
      (COLON)
      (type
        (typeBounds
          (identifier
            (NAME)))))
    (block
      (O_BRACE)
      (expr
        (subExpr
          (identifier
            (NAME))))
      (ERROR
        (PERIOD))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (expr
        (subExpr
          (O_PAREN)
          (expr
            (subExpr
              (identifier
                (NAME))))
          (C_PAREN)))
      (ERROR
        (PERIOD))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (expr
        (subExpr
          (O_PAREN)
          (expr
            (subExpr
              (identifier
                (NAME))))
          (C_PAREN)))
      (C_BRACE)))
  (FN_KEYWORD)
  (NAME)
  (params
    (O_PAREN)
    (C_PAREN))
  (O_BRACE)
  (expr
    (subExpr
      (identifier
        (NAME))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (INT))
      (ERROR
        (divOp
          (SLASH)))
      (divOp
        (SLASH))
      (subExpr
        (identifier
          (NAME)))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (typeAnnot
      (COLON)
      (type
        (typeBounds
          (identifier
            (NAME)))))
    (EQUALS)
    (expr
      (subExpr
        (INT))
      (ERROR
        (divOp
          (SLASH)))
      (divOp
        (SLASH))
      (subExpr
        (identifier
          (NAME)))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (INT))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (FLOAT))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (CHAR))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (STRING
          (ERROR
            (NAME))))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (identifier
          (NAME)))
      (ERROR
        (divOp
          (SLASH)))
      (divOp
        (SLASH))
      (subExpr
        (identifier
          (NAME)))))
  (expr
    (subExpr
      (identifier
        (NAME))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (listExpr
          (O_BRACKET)
          (expr
            (subExpr
              (INT)))
          (COMMA)
          (expr
            (subExpr
              (INT)))
          (COMMA)
          (expr
            (subExpr
              (INT)))
          (C_BRACKET)))
      (ERROR
        (divOp
          (SLASH)))
      (divOp
        (SLASH))
      (subExpr
        (identifier
          (NAME)))))
  (varDef
    (LET_KEYWORD)
    (pattern
      (NAME))
    (EQUALS)
    (expr
      (subExpr
        (identifier
          (NAME)
          (COLON)
          (COLON)
          (NAME)))))
  (O_PAREN)
  (subExpr
    (identifier
      (NAME)
      (COLON)
      (ERROR
        (FLOAT)
        (COMMA)
        (NAME))
      (COLON)
      (ERROR
        (FLOAT)
        (C_PAREN)
        (SLASH)
        (SLASH)
        (NAME)
        (NAME))
      (NAME)))
  (accessOp
    (PERIOD))
  (subExpr
    (identifier
      (NAME)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (NAME))
  (subExpr
    (identifier
      (NAME))
    (posCall
      (O_PAREN)
      (expr
        (subExpr
          (STRING
            (ERROR
              (NAME)))))
      (C_PAREN)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (NAME))
  (subExpr
    (identifier
      (NAME)))
  (accessOp
    (PERIOD))
  (subExpr
    (identifier
      (NAME))
    (posCall
      (O_PAREN)
      (C_PAREN)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (NAME))
  (subExpr
    (identifier
      (NAME)
      (ERROR
        (NAME))
      (COLON)
      (COLON)
      (NAME))
    (posCall
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME))))
      (C_PAREN)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (NAME)
    (NAME)
    (FOR_KEYWORD))
  (subExpr
    (identifier
      (NAME)))
  (ERROR
    (NAME))
  (divOp
    (SLASH))
  (ERROR
    (SLASH))
  (subExpr
    (identifier
      (NAME)
      (COLON)
      (COLON)
      (NAME)
      (COLON)
      (COLON)
      (NAME))
    (posCall
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME))))
      (C_PAREN)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH))
  (IF_KEYWORD)
  (LET_KEYWORD)
  (pattern
    (NAME))
  (EQUALS)
  (subExpr
    (ifExpr
      (IF_KEYWORD)
      (expr
        (subExpr
          (identifier
            (NAME))))
      (block
        (O_BRACE)
        (expr
          (subExpr
            (INT)))
        (C_BRACE))
      (ELSE_KEYWORD)
      (block
        (O_BRACE)
        (expr
          (subExpr
            (INT))
          (addOp
            (PLUS))
          (subExpr
            (INT)))
        (C_BRACE))))
  (ERROR
    (divOp
      (SLASH)))
  (divOp
    (SLASH))
  (WHILE_KEYWORD)
  (subExpr
    (identifier
      (NAME)))
  (ERROR
    (LET_KEYWORD)
    (NAME))
  (assignOp
    (EQUALS))
  (subExpr
    (whileExpr
      (WHILE_KEYWORD)
      (expr
        (subExpr
          (identifier
            (NAME)))
        (ltOp
          (O_ANGLE))
        (subExpr
          (INT)))
      (block
        (O_BRACE)
        (expr
          (subExpr
            (identifier
              (NAME)))
          (assignOp
            (EQUALS))
          (subExpr
            (identifier
              (NAME)))
          (addOp
            (PLUS))
          (subExpr
            (INT)))
        (C_BRACE))))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (FOR_KEYWORD)
    (NAME)
    (LET_KEYWORD)
    (NAME)
    (EQUALS))
  (subExpr
    (forExpr
      (FOR_KEYWORD)
      (pattern
        (NAME))
      (IN_KEYWORD)
      (expr
        (subExpr
          (listExpr
            (O_BRACKET)
            (expr
              (subExpr
                (INT)))
            (COMMA)
            (expr
              (subExpr
                (INT)))
            (COMMA)
            (expr
              (subExpr
                (INT)))
            (C_BRACKET))))
      (block
        (O_BRACE)
        (expr
          (subExpr
            (identifier
              (NAME))))
        (expr
          (subExpr
            (O_PAREN)
            (expr
              (subExpr
                (identifier
                  (NAME))))
            (C_PAREN)))
        (expr
          (subExpr
            (identifier
              (NAME)))
          (addOp
            (PLUS))
          (subExpr
            (INT)))
        (C_BRACE))))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (LET_KEYWORD))
  (subExpr
    (identifier
      (NAME)
      (COLON)
      (COLON)
      (NAME))
    (posCall
      (O_PAREN)
      (expr
        (subExpr
          (identifier
            (NAME))))
      (C_PAREN)))
  (assignOp
    (EQUALS))
  (subExpr
    (identifier
      (NAME)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH)
    (NAME)
    (NAME)
    (LET_KEYWORD))
  (subExpr
    (identifier
      (NAME)
      (COLON)
      (COLON)
      (NAME))
    (namedCall
      (O_PAREN)
      (namedArg
        (NAME)
        (COLON)
        (expr
          (subExpr
            (identifier
              (NAME)))))
      (C_PAREN)))
  (assignOp
    (EQUALS))
  (subExpr
    (identifier
      (NAME)))
  (divOp
    (SLASH))
  (ERROR
    (SLASH))
  (MATCH_KEYWORD)
  (subExpr
    (identifier
      (NAME)))
  (ERROR
    (NAME))
  (assignOp
    (EQUALS))
  (MATCH_KEYWORD)
  (expr
    (subExpr
      (INT)))
  (O_BRACE)
  (matchClause
    (pattern
      (INT))
    (block
      (O_BRACE)
      (expr
        (subExpr
          (STRING
            (ERROR
              (NAME)))))
      (C_BRACE)))
  (matchClause
    (pattern
      (NAME))
    (guard
      (IF_KEYWORD)
      (expr
        (subExpr
          (identifier
            (NAME)))
        (modOp
          (PERCENT))
        (subExpr
          (INT))
        (eqOp
          (EQUALS)
          (EQUALS))
        (subExpr
          (INT))))
    (block
      (O_BRACE)
      (expr
        (subExpr
          (ifExpr
            (IF_KEYWORD)
            (expr
              (subExpr
                (O_PAREN)
                (expr
                  (subExpr
                    (identifier
                      (NAME)))
                  (gtOp
                    (C_ANGLE))
                  (subExpr
                    (INT)))
                (C_PAREN)))
            (block
              (O_BRACE)
              (expr
                (subExpr
                  (STRING
                    (ERROR
                      (NAME)))))
              (C_BRACE))
            (ELSE_KEYWORD)
            (block
              (O_BRACE)
              (ERROR)
              (expr
                (subExpr
                  (identifier
                    (NAME))))
              (expr
                (subExpr
                  (identifier
                    (NAME))))
              (expr
                (subExpr
                  (STRING
                    (ERROR
                      (C_BRACE)
                      (UNDERSCORE)
                      (O_BRACE)))))
              (expr
                (subExpr
                  (identifier
                    (NAME))))
              (expr
                (subExpr
                  (STRING
                    (MISSING """))))
              (C_BRACE)))))
      (ERROR
        (divOp
          (SLASH))
        (divOp
          (SLASH))
        (MATCH_KEYWORD)
        (NAME))
      (varDef
        (LET_KEYWORD)
        (pattern
          (NAME))
        (EQUALS)
        (expr
          (subExpr
            (matchExpr
              (MATCH_KEYWORD)
              (expr
                (subExpr
                  (identifier
                    (NAME))))
              (matchClauses
                (O_BRACE)
                (matchClause
                  (pattern
                    (conPattern
                      (identifier
                        (NAME)
                        (COLON)
                        (COLON)
                        (NAME))
                      (conPatternParams
                        (O_PAREN)
                        (fieldPattern
                          (NAME)
                          (COLON)
                          (pattern
                            (INT)))
                        (COMMA)
                        (fieldPattern
                          (NAME)
                          (COLON)
                          (pattern
                            (INT)))
                        (C_PAREN))))
                  (block
                    (O_BRACE)
                    (expr
                      (subExpr
                        (STRING
                          (ERROR
                            (NAME)))))
                    (C_BRACE)))
                (matchClause
                  (pattern
                    (conPattern
                      (identifier
                        (NAME)
                        (COLON)
                        (COLON)
                        (NAME))
                      (conPatternParams
                        (O_PAREN)
                        (fieldPattern
                          (NAME)
                          (COLON)
                          (pattern
                            (INT)))
                        (C_PAREN))))
                  (block
                    (O_BRACE)
                    (ERROR
                      (expr
                        (subExpr
                          (identifier
                            (NAME))))
                      (expr
                        (subExpr
                          (identifier
                            (NAME)))))
                    (expr
                      (subExpr
                        (identifier
                          (NAME)
                          (COLON)
                          (COLON)
                          (NAME))))
                    (expr
                      (subExpr
                        (O_PAREN)
                        (expr
                          (subExpr
                            (identifier
                              (NAME))))
                        (C_PAREN)))
                    (expr
                      (subExpr
                        (ifExpr
                          (IF_KEYWORD)
                          (expr
                            (subExpr
                              (identifier
                                (NAME)))
                            (neOp
                              (EXCL)
                              (EQUALS))
                            (subExpr
                              (INT)))
                          (block
                            (O_BRACE)
                            (expr
                              (subExpr
                                (identifier
                                  (NAME))))
                            (ERROR
                              (O_PAREN)
                              (NAME)
                              (O_BRACE))
                            (C_BRACE)))))
                    (expr
                      (subExpr
                        (identifier
                          (NAME))))
                    (expr
                      (subExpr
                        (INT)))
                    (ERROR
                      (NAME)
                      (C_PAREN))
                    (C_BRACE)))
                (matchClause
                  (pattern
                    (hole
                      (UNDERSCORE)))
                  (block
                    (O_BRACE)
                    (expr
                      (subExpr
                        (STRING
                          (ERROR
                            (NAME)))))
                    (C_BRACE)))
                (C_BRACE))))
          (ERROR
            (divOp
              (SLASH)))
          (divOp
            (SLASH))
          (subExpr
            (ifLetExpr
              (IF_KEYWORD)
              (LET_KEYWORD)
              (ERROR
                (NAME)
                (LET_KEYWORD))
              (pattern
                (conPattern
                  (identifier
                    (NAME))
                  (conPatternParams
                    (O_PAREN)
                    (fieldPattern
                      (NAME))
                    (C_PAREN))))
              (EQUALS)
              (expr
                (subExpr
                  (identifier
                    (NAME))
                  (posCall
                    (O_PAREN)
                    (expr
                      (subExpr
                        (INT)))
                    (C_PAREN))))
              (block
                (O_BRACE)
                (expr
                  (subExpr
                    (identifier
                      (NAME))))
                (expr
                  (subExpr
                    (O_PAREN)
                    (ERROR
                      (NAME)
                      (NAME)
                      (O_BRACE)
                      (C_BRACE))
                    (expr
                      (subExpr
                        (identifier
                          (NAME))))
                    (C_PAREN)))
                (C_BRACE))
              (ELSE_KEYWORD)
              (block
                (O_BRACE)
                (expr
                  (subExpr
                    (identifier
                      (NAME))))
                (expr
                  (subExpr
                    (O_PAREN)
                    (ERROR
                      (NAME))
                    (expr
                      (subExpr
                        (identifier
                          (NAME))))
                    (ERROR)
                    (C_PAREN)))
                (C_BRACE))))
          (divOp
            (SLASH))
          (ERROR
            (SLASH))
          (subExpr
            (identifier
              (NAME)))))
      (varDef
        (LET_KEYWORD)
        (pattern
          (NAME))
        (typeAnnot
          (COLON)
          (type
            (fnType
              (fnTypeParams
                (PIPE)
                (type
                  (typeBounds
                    (identifier
                      (NAME))))
                (PIPE))
              (typeAnnot
                (COLON)
                (type
                  (typeBounds
                    (identifier
                      (NAME))))))))
        (EQUALS)
        (expr
          (subExpr
            (closureExpr
              (closureParams
                (PIPE)
                (param
                  (pattern
                    (NAME)))
                (PIPE))
              (block
                (O_BRACE)
                (expr
                  (subExpr
                    (identifier
                      (NAME)))
                  (expOp
                    (CARET))
                  (subExpr
                    (INT)))
                (C_BRACE))))))
      (varDef
        (LET_KEYWORD)
        (pattern
          (NAME))
        (EQUALS)
        (expr
          (subExpr
            (closureExpr
              (closureParams
                (PIPE)
                (PIPE))
              (block
                (O_BRACE)
                (expr
                  (subExpr
                    (identifier
                      (NAME))))
                (expr
                  (subExpr
                    (O_PAREN)
                    (expr
                      (subExpr
                        (STRING
                          (ERROR
                            (NAME)))))
                    (C_PAREN)))
                (C_BRACE))))
          (ERROR
            (divOp
              (SLASH)))
          (divOp
            (SLASH))
          (subExpr
            (identifier
              (NAME)))))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (varDef
        (LET_KEYWORD)
        (pattern
          (NAME))
        (EQUALS)
        (expr
          (subExpr
            (identifier
              (NAME)))
          (ERROR
            (divOp
              (SLASH)))
          (divOp
            (SLASH))
          (subExpr
            (identifier
              (NAME)))))
      (expr
        (subExpr
          (identifier
            (NAME)))
        (ERROR
          (divOp
            (SLASH)))
        (divOp
          (SLASH))
        (subExpr
          (identifier
            (NAME))))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (ERROR
        (closureParams
          (PIPE)
          (param
            (pattern
              (NAME))
            (typeAnnot
              (COLON)
              (type
                (typeBounds
                  (identifier
                    (NAME))))))
          (PIPE)))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (ERROR
        (PERIOD))
      (expr
        (subExpr
          (identifier
            (NAME))))
      (expr
        (subExpr
          (O_PAREN)
          (expr
            (subExpr
              (identifier
                (MISSING NAME))))
          (C_PAREN)))
      (varDef
        (LET_KEYWORD)
        (pattern
          (NAME))
        (EQUALS)
        (expr
          (subExpr
            (identifier
              (NAME)
              (COLON)
              (COLON)
              (NAME)))))
      (C_BRACE))))
